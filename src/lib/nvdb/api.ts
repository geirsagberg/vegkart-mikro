/* tslint:disable */
/* eslint-disable */
/**
 * NVDB API Les Uberiket
 * Dette API-et brukes til 책 lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et p책 https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BinaerEgenskap
 */
export interface BinaerEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof BinaerEgenskap
     */
    'format': string;
    /**
     * 
     * @type {number}
     * @memberof BinaerEgenskap
     */
    'ressursId'?: number;
}
/**
 * 
 * @export
 * @interface BoolskEgenskap
 */
export interface BoolskEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {boolean}
     * @memberof BoolskEgenskap
     */
    'verdi': boolean;
}
/**
 * 
 * @export
 * @interface DatoEgenskap
 */
export interface DatoEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof DatoEgenskap
     */
    'verdi': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Detaljniva = {
    Vegtrase: 'VEGTRASE',
    Kjorebane: 'KJOREBANE',
    Kjorefelt: 'KJOREFELT',
    VegtraseOgKjorebane: 'VEGTRASE_OG_KJOREBANE'
} as const;

export type Detaljniva = typeof Detaljniva[keyof typeof Detaljniva];


/**
 * 
 * @export
 * @interface EgenskapVerdi
 */
export interface EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof EgenskapVerdi
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface EnumEgenskap
 */
export interface EnumEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {number}
     * @memberof EnumEgenskap
     */
    'verdi': number;
}
/**
 * 
 * @export
 * @interface FlyttallEgenskap
 */
export interface FlyttallEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {number}
     * @memberof FlyttallEgenskap
     */
    'verdi': number;
}
/**
 * 
 * @export
 * @interface GeometriEgenskap
 */
export interface GeometriEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {Geometristruktur}
     * @memberof GeometriEgenskap
     */
    'verdi': Geometristruktur;
}
/**
 * 
 * @export
 * @interface GeometriKvalitet
 */
export interface GeometriKvalitet {
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'malemetode'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'malemetodeHoyde'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'noyaktighet'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'noyaktighetHoyde'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'synbarhet'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'maksimaltAvvik'?: number;
    /**
     * 
     * @type {string}
     * @memberof GeometriKvalitet
     */
    'datafangstmetode'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeometriKvalitet
     */
    'datafangstmetodeHoyde'?: string;
}
/**
 * 
 * @export
 * @interface Geometristruktur
 */
export interface Geometristruktur {
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'wkt': string;
    /**
     * 
     * @type {SRID}
     * @memberof Geometristruktur
     */
    'srid': SRID;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'lengde'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'datafangstdato'?: string;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'temakode'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'medium'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'kommune'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'hoydereferanse'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'sosiNavn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Geometristruktur
     */
    'referansegeometri'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'verifiseringsdato'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'oppdateringsdato'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'prosesshistorikk'?: string;
    /**
     * 
     * @type {GeometriKvalitet}
     * @memberof Geometristruktur
     */
    'kvalitet'?: GeometriKvalitet;
}


/**
 * 
 * @export
 * @interface Gyldighetsperiode
 */
export interface Gyldighetsperiode {
    /**
     * 
     * @type {string}
     * @memberof Gyldighetsperiode
     */
    'startdato': string;
    /**
     * 
     * @type {string}
     * @memberof Gyldighetsperiode
     */
    'sluttdato'?: string;
}
/**
 * 
 * @export
 * @interface HeltallEgenskap
 */
export interface HeltallEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {number}
     * @memberof HeltallEgenskap
     */
    'verdi': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InkluderIVegobjekt = {
    Gyldighetsperiode: 'gyldighetsperiode',
    Egenskaper: 'egenskaper',
    Stedfesting: 'stedfesting',
    Barn: 'barn',
    Alle: 'alle',
    Minimum: 'minimum'
} as const;

export type InkluderIVegobjekt = typeof InkluderIVegobjekt[keyof typeof InkluderIVegobjekt];


/**
 * 
 * @export
 * @interface KortDatoEgenskap
 */
export interface KortDatoEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof KortDatoEgenskap
     */
    'verdi': string;
}
/**
 * 
 * @export
 * @interface ListeEgenskap
 */
export interface ListeEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {Array<EgenskapVerdi>}
     * @memberof ListeEgenskap
     */
    'verdier': Array<EgenskapVerdi>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Malemetode = {
    Metrert: 'METRERT',
    Geometrisk: 'GEOMETRISK'
} as const;

export type Malemetode = typeof Malemetode[keyof typeof Malemetode];


/**
 * 
 * @export
 * @interface NesteSide
 */
export interface NesteSide {
    /**
     * Token som brukes for 책 f책 neste side
     * @type {string}
     * @memberof NesteSide
     */
    'start': string;
    /**
     * Komplett url for neste side
     * @type {string}
     * @memberof NesteSide
     */
    'href': string;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'id': number;
    /**
     * 
     * @type {Array<Nodeport>}
     * @memberof Node
     */
    'porter': Array<Nodeport>;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof Node
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof Node
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface NodeEndret
 */
export interface NodeEndret extends VegnettHendelse {
    /**
     * Liste med informasjon om portene som denne noden er tilkoblet (erstatter eksisterende porter)
     * @type {Set<Nodeport>}
     * @memberof NodeEndret
     */
    'porterErstattet': Set<Nodeport>;
    /**
     * Liste med id-er for porter som er fjernet
     * @type {Set<number>}
     * @memberof NodeEndret
     */
    'porterFjernet': Set<number>;
    /**
     * Utelatt dersom gyldighetsperiode ikke er endret
     * @type {Gyldighetsperiode}
     * @memberof NodeEndret
     */
    'gyldighetsperiode'?: Gyldighetsperiode;
    /**
     * Utelatt dersom geometrien ikke er endret
     * @type {Geometristruktur}
     * @memberof NodeEndret
     */
    'geometri'?: Geometristruktur;
}
/**
 * 
 * @export
 * @interface NodeFjernet
 */
export interface NodeFjernet extends VegnettHendelse {
}
/**
 * 
 * @export
 * @interface NodeOpprettet
 */
export interface NodeOpprettet extends VegnettHendelse {
    /**
     * Liste med informasjon om portene som denne noden er tilkoblet
     * @type {Set<Nodeport>}
     * @memberof NodeOpprettet
     */
    'porter': Set<Nodeport>;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof NodeOpprettet
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof NodeOpprettet
     */
    'gyldighetsperiode': Gyldighetsperiode;
}
/**
 * 
 * @export
 * @interface Nodeport
 */
export interface Nodeport {
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'nummer': number;
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'veglenkesekvensId': number;
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'veglenkesekvensPortNummer': number;
}
/**
 * 
 * @export
 * @interface NoderSide
 */
export interface NoderSide {
    /**
     * 
     * @type {Array<Node>}
     * @memberof NoderSide
     */
    'noder': Array<Node>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof NoderSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetail
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'instance'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetail
     */
    'properties'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface RelasjonEndret
 */
export interface RelasjonEndret extends RelasjonEndring {
    /**
     * Barn som er lagt til for relasjonstypen
     * @type {Set<VegobjektId>}
     * @memberof RelasjonEndret
     */
    'barnLagtTil': Set<VegobjektId>;
    /**
     * Barn som er fjernet for relasjonstypen
     * @type {Set<VegobjektId>}
     * @memberof RelasjonEndret
     */
    'barnFjernet': Set<VegobjektId>;
}
/**
 * 
 * @export
 * @interface RelasjonEndring
 */
export interface RelasjonEndring {
    /**
     * 
     * @type {string}
     * @memberof RelasjonEndring
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface RelasjonErstattet
 */
export interface RelasjonErstattet extends RelasjonEndring {
    /**
     * Relasjoner som er lagt til for relasjonstypen
     * @type {Set<VegobjektId>}
     * @memberof RelasjonErstattet
     */
    'barn': Set<VegobjektId>;
}
/**
 * 
 * @export
 * @interface RelasjonFjernet
 */
export interface RelasjonFjernet extends RelasjonEndring {
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Retning = {
    Med: 'MED',
    Mot: 'MOT'
} as const;

export type Retning = typeof Retning[keyof typeof Retning];


/**
 * 
 * @export
 * @enum {string}
 */

export const SRID = {
    _5972: '5972',
    _5973: '5973',
    _5974: '5974',
    _5975: '5975',
    _4326: '4326'
} as const;

export type SRID = typeof SRID[keyof typeof SRID];


/**
 * 
 * @export
 * @interface SideMetadata
 */
export interface SideMetadata {
    /**
     * Antallet objekter som ble returnert i denne responsen
     * @type {number}
     * @memberof SideMetadata
     */
    'returnert': number;
    /**
     * Maks antall objekter som blir returnert per side
     * @type {number}
     * @memberof SideMetadata
     */
    'sidestorrelse': number;
    /**
     * Informasjon om neste side, utelatt dersom man sp첩r p책 et endepunkt som gjelder et spesifikt vegobjekt. N책r resultatsettet er tomt vil neste side v챈re tom og samme start token vil returneres for p책f첩lgende side.
     * @type {NesteSide}
     * @memberof SideMetadata
     */
    'neste'?: NesteSide;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Sideposisjon = {
    V: 'V',
    H: 'H',
    Vh: 'VH',
    M: 'M',
    K: 'K',
    Mv: 'MV',
    Mh: 'MH',
    Vt: 'VT',
    Ht: 'HT',
    R: 'R',
    L: 'L'
} as const;

export type Sideposisjon = typeof Sideposisjon[keyof typeof Sideposisjon];


/**
 * 
 * @export
 * @interface Stedfesting
 */
export interface Stedfesting {
    /**
     * 
     * @type {string}
     * @memberof Stedfesting
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface StedfestingEndring
 */
export interface StedfestingEndring {
    /**
     * 
     * @type {string}
     * @memberof StedfestingEndring
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface StedfestingErstattet
 */
export interface StedfestingErstattet extends StedfestingEndring {
    /**
     * Ny stedfesting som erstatter den gamle
     * @type {Stedfesting}
     * @memberof StedfestingErstattet
     */
    'stedfesting': Stedfesting;
}
/**
 * 
 * @export
 * @interface StedfestingFjernet
 */
export interface StedfestingFjernet extends StedfestingEndring {
}
/**
 * 
 * @export
 * @interface StedfestingLinje
 */
export interface StedfestingLinje {
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'startposisjon': number;
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'sluttposisjon': number;
    /**
     * 
     * @type {Retning}
     * @memberof StedfestingLinje
     */
    'retning'?: Retning;
    /**
     * 
     * @type {Sideposisjon}
     * @memberof StedfestingLinje
     */
    'sideposisjon'?: Sideposisjon;
    /**
     * 
     * @type {Array<string>}
     * @memberof StedfestingLinje
     */
    'kjorefelt': Array<string>;
}


/**
 * 
 * @export
 * @interface StedfestingLinjer
 */
export interface StedfestingLinjer extends Stedfesting {
    /**
     * 
     * @type {Array<StedfestingLinje>}
     * @memberof StedfestingLinjer
     */
    'linjer': Array<StedfestingLinje>;
    /**
     * 
     * @type {boolean}
     * @memberof StedfestingLinjer
     */
    'isEmpty': boolean;
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinjer
     */
    'size': number;
    /**
     * 
     * @type {StedfestingLinje}
     * @memberof StedfestingLinjer
     */
    'first'?: StedfestingLinje;
    /**
     * 
     * @type {StedfestingLinje}
     * @memberof StedfestingLinjer
     */
    'last'?: StedfestingLinje;
}
/**
 * 
 * @export
 * @interface StedfestingLinjerEndret
 */
export interface StedfestingLinjerEndret extends StedfestingEndring {
    /**
     * Stedfestinglinjer som er lagt til
     * @type {Array<StedfestingLinje>}
     * @memberof StedfestingLinjerEndret
     */
    'lagtTil': Array<StedfestingLinje>;
    /**
     * Stedfestinglinjer som er fjernet
     * @type {Array<StedfestingLinje>}
     * @memberof StedfestingLinjerEndret
     */
    'fjernet': Array<StedfestingLinje>;
}
/**
 * 
 * @export
 * @interface StedfestingMangler
 */
export interface StedfestingMangler extends Stedfesting {
}
/**
 * 
 * @export
 * @interface StedfestingPunkt
 */
export interface StedfestingPunkt {
    /**
     * 
     * @type {number}
     * @memberof StedfestingPunkt
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StedfestingPunkt
     */
    'posisjon': number;
    /**
     * 
     * @type {Retning}
     * @memberof StedfestingPunkt
     */
    'retning'?: Retning;
    /**
     * 
     * @type {Sideposisjon}
     * @memberof StedfestingPunkt
     */
    'sideposisjon'?: Sideposisjon;
    /**
     * 
     * @type {Array<string>}
     * @memberof StedfestingPunkt
     */
    'kjorefelt': Array<string>;
}


/**
 * 
 * @export
 * @interface StedfestingPunkter
 */
export interface StedfestingPunkter extends Stedfesting {
    /**
     * 
     * @type {Set<StedfestingPunkt>}
     * @memberof StedfestingPunkter
     */
    'punkter': Set<StedfestingPunkt>;
    /**
     * 
     * @type {boolean}
     * @memberof StedfestingPunkter
     */
    'isEmpty': boolean;
    /**
     * 
     * @type {number}
     * @memberof StedfestingPunkter
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface StedfestingPunkterEndret
 */
export interface StedfestingPunkterEndret extends StedfestingEndring {
    /**
     * Stedfestingpunkter som er lagt til
     * @type {Set<StedfestingPunkt>}
     * @memberof StedfestingPunkterEndret
     */
    'lagtTil': Set<StedfestingPunkt>;
    /**
     * Stedfestingpunkter som er fjernet
     * @type {Set<StedfestingPunkt>}
     * @memberof StedfestingPunkterEndret
     */
    'fjernet': Set<StedfestingPunkt>;
}
/**
 * 
 * @export
 * @interface StedfestingSving
 */
export interface StedfestingSving extends Stedfesting {
    /**
     * 
     * @type {number}
     * @memberof StedfestingSving
     */
    'id': number;
    /**
     * 
     * @type {StedfestingPunkt}
     * @memberof StedfestingSving
     */
    'startpunkt': StedfestingPunkt;
    /**
     * 
     * @type {StedfestingPunkt}
     * @memberof StedfestingSving
     */
    'sluttpunkt': StedfestingPunkt;
}
/**
 * 
 * @export
 * @interface StrukturEgenskap
 */
export interface StrukturEgenskap extends EgenskapVerdi {
}
/**
 * 
 * @export
 * @interface TekstEgenskap
 */
export interface TekstEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof TekstEgenskap
     */
    'verdi': string;
}
/**
 * 
 * @export
 * @interface TidEgenskap
 */
export interface TidEgenskap extends EgenskapVerdi {
    /**
     * 
     * @type {string}
     * @memberof TidEgenskap
     */
    'verdi': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Topologiniva = {
    Vegtrase: 'VEGTRASE',
    Kjorebane: 'KJOREBANE',
    Kjorefelt: 'KJOREFELT'
} as const;

export type Topologiniva = typeof Topologiniva[keyof typeof Topologiniva];


/**
 * 
 * @export
 * @enum {string}
 */

export const TypeVeg = {
    KanalisertVeg: 'KANALISERT_VEG',
    EnkelBilveg: 'ENKEL_BILVEG',
    Rampe: 'RAMPE',
    Rundkjoring: 'RUNDKJORING',
    Bilferje: 'BILFERJE',
    Passasjerferje: 'PASSASJERFERJE',
    GangOgSykkelveg: 'GANG_OG_SYKKELVEG',
    Sykkelveg: 'SYKKELVEG',
    Gangveg: 'GANGVEG',
    Gagate: 'GAGATE',
    Fortau: 'FORTAU',
    Trapp: 'TRAPP',
    Gangfelt: 'GANGFELT',
    Gatetun: 'GATETUN',
    Traktorveg: 'TRAKTORVEG',
    Sti: 'STI',
    Annet: 'ANNET'
} as const;

export type TypeVeg = typeof TypeVeg[keyof typeof TypeVeg];


/**
 * 
 * @export
 * @interface Veglenke
 */
export interface Veglenke {
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'nummer': number;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof Veglenke
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {boolean}
     * @memberof Veglenke
     */
    'konnektering': boolean;
    /**
     * 
     * @type {Topologiniva}
     * @memberof Veglenke
     */
    'topologiniva': Topologiniva;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'maledato'?: string;
    /**
     * 
     * @type {Malemetode}
     * @memberof Veglenke
     */
    'malemetode': Malemetode;
    /**
     * 
     * @type {Detaljniva}
     * @memberof Veglenke
     */
    'detaljniva': Detaljniva;
    /**
     * 
     * @type {TypeVeg}
     * @memberof Veglenke
     */
    'typeVeg': TypeVeg;
    /**
     * 
     * @type {StedfestingLinje}
     * @memberof Veglenke
     */
    'superstedfesting'?: StedfestingLinje;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'startport': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'sluttport': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'kommune': number;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof Veglenke
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'lengde': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Veglenke
     */
    'feltoversikt': Array<string>;
}


/**
 * 
 * @export
 * @interface VeglenkeMedId
 */
export interface VeglenkeMedId {
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'veglenkesekvensId': number;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'veglenkenummer': number;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof VeglenkeMedId
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {boolean}
     * @memberof VeglenkeMedId
     */
    'konnektering': boolean;
    /**
     * 
     * @type {Topologiniva}
     * @memberof VeglenkeMedId
     */
    'topologiniva': Topologiniva;
    /**
     * 
     * @type {string}
     * @memberof VeglenkeMedId
     */
    'maledato'?: string;
    /**
     * 
     * @type {Malemetode}
     * @memberof VeglenkeMedId
     */
    'malemetode': Malemetode;
    /**
     * 
     * @type {Detaljniva}
     * @memberof VeglenkeMedId
     */
    'detaljniva': Detaljniva;
    /**
     * 
     * @type {TypeVeg}
     * @memberof VeglenkeMedId
     */
    'typeVeg': TypeVeg;
    /**
     * 
     * @type {StedfestingLinje}
     * @memberof VeglenkeMedId
     */
    'superstedfesting'?: StedfestingLinje;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'startnode': number;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'sluttnode': number;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'startposisjon': number;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'sluttposisjon': number;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'kommune': number;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof VeglenkeMedId
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {number}
     * @memberof VeglenkeMedId
     */
    'lengde': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof VeglenkeMedId
     */
    'feltoversikt': Array<string>;
}


/**
 * 
 * @export
 * @interface Veglenkesekvens
 */
export interface Veglenkesekvens {
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvens
     */
    'id': number;
    /**
     * 
     * @type {Array<Veglenkesekvensport>}
     * @memberof Veglenkesekvens
     */
    'porter': Array<Veglenkesekvensport>;
    /**
     * 
     * @type {Array<Veglenke>}
     * @memberof Veglenkesekvens
     */
    'veglenker': Array<Veglenke>;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvens
     */
    'lengde': number;
    /**
     * 
     * @type {string}
     * @memberof Veglenkesekvens
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface VeglenkesekvensEndret
 */
export interface VeglenkesekvensEndret extends VegnettHendelse {
    /**
     * Liste med informasjon om portene som denne veglenkesekvensen er tilkoblet (erstatter eksisterende porter)
     * @type {Set<Veglenkesekvensport>}
     * @memberof VeglenkesekvensEndret
     */
    'porterErstattet': Set<Veglenkesekvensport>;
    /**
     * Liste med id-er for porter som er fjernet
     * @type {Set<number>}
     * @memberof VeglenkesekvensEndret
     */
    'porterFjernet': Set<number>;
    /**
     * Liste med informasjon om veglenkene som veglenkesekvensen best책r av (erstatter eksisterende veglenker)
     * @type {Set<Veglenke>}
     * @memberof VeglenkesekvensEndret
     */
    'veglenkerErstattet': Set<Veglenke>;
    /**
     * Liste med id-er for veglenker som er fjernet
     * @type {Set<number>}
     * @memberof VeglenkesekvensEndret
     */
    'veglenkerFjernet': Set<number>;
    /**
     * Lengden p책 veglenkesekvensen i meter
     * @type {number}
     * @memberof VeglenkesekvensEndret
     */
    'lengde'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof VeglenkesekvensEndret
     */
    'lastLengde'?: boolean;
}
/**
 * 
 * @export
 * @interface VeglenkesekvensFjernet
 */
export interface VeglenkesekvensFjernet extends VegnettHendelse {
}
/**
 * 
 * @export
 * @interface VeglenkesekvensOpprettet
 */
export interface VeglenkesekvensOpprettet extends VegnettHendelse {
    /**
     * Liste med informasjon om portene som denne veglenkesekvensen er tilkoblet
     * @type {Set<Veglenkesekvensport>}
     * @memberof VeglenkesekvensOpprettet
     */
    'porter': Set<Veglenkesekvensport>;
    /**
     * Liste med informasjon om veglenkene som veglenkesekvensen best책r av
     * @type {Set<Veglenke>}
     * @memberof VeglenkesekvensOpprettet
     */
    'veglenker': Set<Veglenke>;
    /**
     * Lengden p책 veglenkesekvensen i meter
     * @type {number}
     * @memberof VeglenkesekvensOpprettet
     */
    'lengde': number;
    /**
     * 
     * @type {boolean}
     * @memberof VeglenkesekvensOpprettet
     */
    'lastLengde': boolean;
}
/**
 * 
 * @export
 * @interface VeglenkesekvenserSide
 */
export interface VeglenkesekvenserSide {
    /**
     * 
     * @type {Array<Veglenkesekvens>}
     * @memberof VeglenkesekvenserSide
     */
    'veglenkesekvenser': Array<Veglenkesekvens>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VeglenkesekvenserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface Veglenkesekvensport
 */
export interface Veglenkesekvensport {
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nummer': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nodeId': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nodePortNummer': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'posisjon': number;
}
/**
 * 
 * @export
 * @interface VegnettDeltaHendelse
 */
export interface VegnettDeltaHendelse {
    /**
     * Unik id for hendelsen
     * @type {number}
     * @memberof VegnettDeltaHendelse
     */
    'hendelseId': number;
    /**
     * Id-en til nettelementet som hendelsen gjelder
     * @type {number}
     * @memberof VegnettDeltaHendelse
     */
    'nettelementId': number;
    /**
     * Nettelementtypeid-en til nettelementet som hendelsen gjelder
     * @type {number}
     * @memberof VegnettDeltaHendelse
     */
    'nettelementType': number;
    /**
     * Tidspunktet hendelsen ble opprettet
     * @type {string}
     * @memberof VegnettDeltaHendelse
     */
    'tidspunkt': string;
    /**
     * Navnet p책 hendelsestypen: VeglenkesekvensOpprettet, VeglenkesekvensEndret, VeglenkesekvensFjernet, NodeOpprettet, NodeEndret, NodeFjernet
     * @type {string}
     * @memberof VegnettDeltaHendelse
     */
    'hendelseType': string;
    /**
     * Detaljer om hendelsen
     * @type {VegnettHendelse}
     * @memberof VegnettDeltaHendelse
     */
    'data': VegnettHendelse;
}
/**
 * 
 * @export
 * @interface VegnettHendelse
 */
export interface VegnettHendelse {
    /**
     * 
     * @type {string}
     * @memberof VegnettHendelse
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VegnettHendelserSide
 */
export interface VegnettHendelserSide {
    /**
     * 
     * @type {Array<VegnettNotifikasjon>}
     * @memberof VegnettHendelserSide
     */
    'hendelser': Array<VegnettNotifikasjon>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegnettHendelserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface VegnettNotifikasjon
 */
export interface VegnettNotifikasjon {
    /**
     * Unik id for hendelsen
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'hendelseId': number;
    /**
     * Id-en til nettelementet som hendelsen gjelder
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'nettelementId': number;
    /**
     * Nettelementtypeid-en til nettelementet som hendelsen gjelder
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'nettelementType': number;
    /**
     * Tidspunktet hendelsen ble opprettet
     * @type {string}
     * @memberof VegnettNotifikasjon
     */
    'tidspunkt': string;
    /**
     * Navnet p책 hendelsestypen: VeglenkesekvensOpprettet, VeglenkesekvensEndret, VeglenkesekvensFjernet, NodeOpprettet, NodeEndret, NodeFjernet
     * @type {string}
     * @memberof VegnettNotifikasjon
     */
    'hendelseType': string;
}
/**
 * 
 * @export
 * @interface Vegobjekt
 */
export interface Vegobjekt {
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'versjon': number;
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'typeId': number;
    /**
     * Tilstede dersom inkluder=alle|gyldighetsperiode
     * @type {Gyldighetsperiode}
     * @memberof Vegobjekt
     */
    'gyldighetsperiode'?: Gyldighetsperiode;
    /**
     * Tilstede dersom inkluder=alle|egenskaper
     * @type {{ [key: string]: EgenskapVerdi; }}
     * @memberof Vegobjekt
     */
    'egenskaper'?: { [key: string]: EgenskapVerdi; };
    /**
     * Tilstede dersom inkluder=alle|barn
     * @type {{ [key: string]: Set<VegobjektId>; }}
     * @memberof Vegobjekt
     */
    'barn'?: { [key: string]: Set<VegobjektId>; };
    /**
     * Tilstede dersom inkluder=alle|stedfesting og objektet er stedfestet p책 vegnettet
     * @type {Stedfesting}
     * @memberof Vegobjekt
     */
    'stedfesting'?: Stedfesting;
    /**
     * 
     * @type {string}
     * @memberof Vegobjekt
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface VegobjektDeltaHendelse
 */
export interface VegobjektDeltaHendelse {
    /**
     * Unik id for hendelsen
     * @type {number}
     * @memberof VegobjektDeltaHendelse
     */
    'hendelseId': number;
    /**
     * Id-en til vegobjektet som hendelsen gjelder
     * @type {number}
     * @memberof VegobjektDeltaHendelse
     */
    'vegobjektId': number;
    /**
     * Vegobjekttypeid-en til vegobjektet som hendelsen gjelder
     * @type {number}
     * @memberof VegobjektDeltaHendelse
     */
    'vegobjektType': number;
    /**
     * Tidspunktet hendelsen ble opprettet
     * @type {string}
     * @memberof VegobjektDeltaHendelse
     */
    'tidspunkt': string;
    /**
     * Navnet p책 hendelsestypen: VegobjektImportert, VegobjektVersjonOpprettet, VegobjektVersjonEndret eller VegobjektVersjonSlettet
     * @type {string}
     * @memberof VegobjektDeltaHendelse
     */
    'hendelseType': string;
    /**
     * Detaljer om hendelsen
     * @type {VegobjektHendelse}
     * @memberof VegobjektDeltaHendelse
     */
    'data': VegobjektHendelse;
}
/**
 * 
 * @export
 * @interface VegobjektHendelse
 */
export interface VegobjektHendelse {
    /**
     * 
     * @type {string}
     * @memberof VegobjektHendelse
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VegobjektHendelserSide
 */
export interface VegobjektHendelserSide {
    /**
     * 
     * @type {Array<VegobjektNotifikasjon>}
     * @memberof VegobjektHendelserSide
     */
    'hendelser': Array<VegobjektNotifikasjon>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegobjektHendelserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface VegobjektId
 */
export interface VegobjektId {
    /**
     * 
     * @type {number}
     * @memberof VegobjektId
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface VegobjektImportert
 */
export interface VegobjektImportert extends VegobjektHendelse {
    /**
     * Innhold for alle versjoner av vegobjektet p책 tidspunktet for importen
     * @type {{ [key: string]: VegobjektVersjon; }}
     * @memberof VegobjektImportert
     */
    'versjoner': { [key: string]: VegobjektVersjon; };
}
/**
 * 
 * @export
 * @interface VegobjektNotifikasjon
 */
export interface VegobjektNotifikasjon {
    /**
     * Unik id for hendelsen
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'hendelseId': number;
    /**
     * Navnet p책 hendelsestypen: VegobjektImportert, VegobjektVersjonOpprettet, VegobjektVersjonEndret eller VegobjektVersjonFjernet
     * @type {string}
     * @memberof VegobjektNotifikasjon
     */
    'hendelseType': string;
    /**
     * Id-en til vegobjektet som hendelsen gjelder
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektId': number;
    /**
     * Vegobjekttypeid-en til vegobjektet som hendelsen gjelder
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektTypeId': number;
    /**
     * Versjon av vegobjektet som hendelsen gjelder. Versjonen er 0 n책r hendelsen er VegobjektImportert
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektVersjon': number;
    /**
     * Tidspunktet hendelsen ble opprettet
     * @type {string}
     * @memberof VegobjektNotifikasjon
     */
    'tidspunkt': string;
}
/**
 * 
 * @export
 * @interface VegobjektVersjon
 */
export interface VegobjektVersjon {
    /**
     * 
     * @type {number}
     * @memberof VegobjektVersjon
     */
    'versjonId': number;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof VegobjektVersjon
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {{ [key: string]: EgenskapVerdi; }}
     * @memberof VegobjektVersjon
     */
    'egenskaper': { [key: string]: EgenskapVerdi; };
    /**
     * 
     * @type {{ [key: string]: Set<VegobjektId>; }}
     * @memberof VegobjektVersjon
     */
    'barn': { [key: string]: Set<VegobjektId>; };
    /**
     * Utelatt dersom objektet ikke er stedfestet p책 vegnettet
     * @type {Stedfesting}
     * @memberof VegobjektVersjon
     */
    'stedfesting'?: Stedfesting;
}
/**
 * 
 * @export
 * @interface VegobjektVersjonEndret
 */
export interface VegobjektVersjonEndret extends VegobjektHendelse {
    /**
     * Ny gyldighetsperiode. Tilstede dersom gyldighetsperiode er endret
     * @type {Gyldighetsperiode}
     * @memberof VegobjektVersjonEndret
     */
    'gyldighetsperiode'?: Gyldighetsperiode;
    /**
     * Oppgir nye verdier for egenskaper som er endret
     * @type {{ [key: string]: EgenskapVerdi; }}
     * @memberof VegobjektVersjonEndret
     */
    'egenskapEndringer': { [key: string]: EgenskapVerdi; };
    /**
     * Beskriver hvilke relasjoner som er endret, erstattet, lagt til eller fjernet
     * @type {{ [key: string]: RelasjonEndring; }}
     * @memberof VegobjektVersjonEndret
     */
    'barnEndringer': { [key: string]: RelasjonEndring; };
    /**
     * Tilstede dersom stedfesting er endret, erstattet, lagt til eller fjernet
     * @type {StedfestingEndring}
     * @memberof VegobjektVersjonEndret
     */
    'stedfestingEndring'?: StedfestingEndring;
    /**
     * Hvilken versjon av vegobjektet som er endret
     * @type {number}
     * @memberof VegobjektVersjonEndret
     */
    'versjonId': number;
}
/**
 * 
 * @export
 * @interface VegobjektVersjonFjernet
 */
export interface VegobjektVersjonFjernet extends VegobjektHendelse {
    /**
     * Hvilken versjon av vegobjektet som er fjernet
     * @type {number}
     * @memberof VegobjektVersjonFjernet
     */
    'versjonId': number;
}
/**
 * 
 * @export
 * @interface VegobjektVersjonOpprettet
 */
export interface VegobjektVersjonOpprettet extends VegobjektHendelse {
    /**
     * Innholdet til versjonen av vegobjektet som ble opprettet
     * @type {VegobjektVersjon}
     * @memberof VegobjektVersjonOpprettet
     */
    'versjon': VegobjektVersjon;
}
/**
 * 
 * @export
 * @interface VegobjekterSide
 */
export interface VegobjekterSide {
    /**
     * 
     * @type {Array<Vegobjekt>}
     * @memberof VegobjekterSide
     */
    'vegobjekter': Array<Vegobjekt>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegobjekterSide
     */
    'metadata': SideMetadata;
}

/**
 * HendelserApi - axios parameter creator
 * @export
 */
export const HendelserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent nodehendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNodeHendelser: async (start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/noder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent siste nodehendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteNodeHendelse: async (tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/noder/siste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent siste veglenkesekvenshendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVeglenkesekvensHendelse: async (tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/veglenkesekvenser/siste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent siste vegnetthendelse (node eller veglenkesekvens)
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegnettHendelse: async (tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/vegnett/siste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent siste vegobjekthendelse
         * @param {number} typeId Vegobjekttype ID
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegobjektHendelseId: async (typeId: number, tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentSisteVegobjektHendelseId', 'typeId', typeId)
            const localVarPath = `/api/v1/hendelser/vegobjekter/{typeId}/siste`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent veglenkesekvenshendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvensHendelser: async (start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/veglenkesekvenser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegnetthendelser (noder og veglenkesekvenser)
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegnettHendelser: async (start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/vegnett`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegobjekthendelser
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHendelser: async (typeId: number, start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjektHendelser', 'typeId', typeId)
            const localVarPath = `/api/v1/hendelser/vegobjekter/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenshendelser som NDJSON
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenkesekvensHendelser: async (start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/veglenkesekvenser/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Str첩m vegobjekthendelser som NDJSON
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVegobjekthendelser: async (typeId: number, start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('streamVegobjekthendelser', 'typeId', typeId)
            const localVarPath = `/api/v1/hendelser/vegobjekter/{typeId}/stream`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HendelserApi - functional programming interface
 * @export
 */
export const HendelserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HendelserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent nodehendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentNodeHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentNodeHendelser(start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentNodeHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent siste nodehendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteNodeHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettNotifikasjon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteNodeHendelse(tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteNodeHendelse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent siste veglenkesekvenshendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteVeglenkesekvensHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettNotifikasjon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteVeglenkesekvensHendelse(tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteVeglenkesekvensHendelse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent siste vegnetthendelse (node eller veglenkesekvens)
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteVegnettHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettNotifikasjon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteVegnettHendelse(tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteVegnettHendelse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent siste vegobjekthendelse
         * @param {number} typeId Vegobjekttype ID
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegobjektNotifikasjon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteVegobjektHendelseId(typeId, tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteVegobjektHendelseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent veglenkesekvenshendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVeglenkesekvensHendelser(start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentVeglenkesekvensHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegnetthendelser (noder og veglenkesekvenser)
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegnettHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegnettHendelser(start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentVegnettHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegobjekthendelser
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjektHendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegobjektHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjektHendelser(typeId, start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentVegobjektHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenshendelser som NDJSON
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VegnettDeltaHendelse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamVeglenkesekvensHendelser(start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.streamVeglenkesekvensHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Str첩m vegobjekthendelser som NDJSON
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVegobjekthendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VegobjektDeltaHendelse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamVegobjekthendelser(typeId, start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.streamVegobjekthendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HendelserApi - factory interface
 * @export
 */
export const HendelserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HendelserApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent nodehendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNodeHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegnettHendelserSide> {
            return localVarFp.hentNodeHendelser(start, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent siste nodehendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteNodeHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegnettNotifikasjon> {
            return localVarFp.hentSisteNodeHendelse(tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent siste veglenkesekvenshendelse
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVeglenkesekvensHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegnettNotifikasjon> {
            return localVarFp.hentSisteVeglenkesekvensHendelse(tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent siste vegnetthendelse (node eller veglenkesekvens)
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegnettHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegnettNotifikasjon> {
            return localVarFp.hentSisteVegnettHendelse(tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent siste vegobjekthendelse
         * @param {number} typeId Vegobjekttype ID
         * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegobjektNotifikasjon> {
            return localVarFp.hentSisteVegobjektHendelseId(typeId, tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent veglenkesekvenshendelser
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegnettHendelserSide> {
            return localVarFp.hentVeglenkesekvensHendelser(start, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegnetthendelser (noder og veglenkesekvenser)
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegnettHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegnettHendelserSide> {
            return localVarFp.hentVegnettHendelser(start, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegobjekthendelser
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegobjektHendelserSide> {
            return localVarFp.hentVegobjektHendelser(typeId, start, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenshendelser som NDJSON
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<VegnettDeltaHendelse>> {
            return localVarFp.streamVeglenkesekvensHendelser(start, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Str첩m vegobjekthendelser som NDJSON
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
         * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVegobjekthendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<VegobjektDeltaHendelse>> {
            return localVarFp.streamVegobjekthendelser(typeId, start, antall, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HendelserApi - object-oriented interface
 * @export
 * @class HendelserApi
 * @extends {BaseAPI}
 */
export class HendelserApi extends BaseAPI {
    /**
     * 
     * @summary Hent nodehendelser
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentNodeHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentNodeHendelser(start, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent siste nodehendelse
     * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteNodeHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteNodeHendelse(tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent siste veglenkesekvenshendelse
     * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteVeglenkesekvensHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteVeglenkesekvensHendelse(tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent siste vegnetthendelse (node eller veglenkesekvens)
     * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteVegnettHendelse(tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteVegnettHendelse(tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent siste vegobjekthendelse
     * @param {number} typeId Vegobjekttype ID
     * @param {string} [tidspunkt] Tidspunkt 책 hente siste hendelse fra
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteVegobjektHendelseId(typeId, tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent veglenkesekvenshendelser
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentVeglenkesekvensHendelser(start, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegnetthendelser (noder og veglenkesekvenser)
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentVegnettHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentVegnettHendelser(start, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegobjekthendelser
     * @param {number} typeId Vegobjekttype ID
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentVegobjektHendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentVegobjektHendelser(typeId, start, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Str첩m veglenkesekvenshendelser som NDJSON
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public streamVeglenkesekvensHendelser(start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).streamVeglenkesekvensHendelser(start, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Str첩m vegobjekthendelser som NDJSON
     * @param {number} typeId Vegobjekttype ID
     * @param {number} [start] Hent hendelser etterf첩lgende denne IDen
     * @param {number} [antall] Antall hendelser som str첩mmes om gangen. Standard 1000, maks 10000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public streamVegobjekthendelser(typeId: number, start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).streamVegobjekthendelser(typeId, start, antall, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VegnettApi - axios parameter creator
 * @export
 */
export const VegnettApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId ID for noden
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNode: async (nodeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('hentNode', 'nodeId', nodeId)
            const localVarPath = `/api/v1/vegnett/noder/{nodeId}`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun noder med angitte IDer
         * @param {number} [start] Hent noder etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNoder: async (antall?: number, ider?: Set<number>, start?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/noder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId ID for veglenkesekvensen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvens: async (veglenkesekvensId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'veglenkesekvensId' is not null or undefined
            assertParamExists('hentVeglenkesekvens', 'veglenkesekvensId', veglenkesekvensId)
            const localVarPath = `/api/v1/vegnett/veglenkesekvenser/{veglenkesekvensId}`
                .replace(`{${"veglenkesekvensId"}}`, encodeURIComponent(String(veglenkesekvensId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun veglenkesekvenser med angitte IDer
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvenser: async (antall?: number, ider?: Set<number>, start?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/veglenkesekvenser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Str첩m veglenker som NDJSON.
         * @param {string} [start] Hent veglenker etterf첩lgende [veglenkesekvensId]-[veglenkenummer]
         * @param {Set<number>} [ider] Hent kun veglenker fra angitte veglenkesekvens-IDer
         * @param {number} [antall] Antall veglenker som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenker: async (start?: string, ider?: Set<number>, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/veglenker/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenser som NDJSON.
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {number} [antall] Antall veglenkesekvenser som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenkesekvenser: async (start?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/veglenkesekvenser/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VegnettApi - functional programming interface
 * @export
 */
export const VegnettApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VegnettApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId ID for noden
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentNode(nodeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentNode(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun noder med angitte IDer
         * @param {number} [start] Hent noder etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentNoder(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoderSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentNoder(antall, ider, start, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentNoder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId ID for veglenkesekvensen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Veglenkesekvens>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVeglenkesekvens(veglenkesekvensId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentVeglenkesekvens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun veglenkesekvenser med angitte IDer
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVeglenkesekvenser(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VeglenkesekvenserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVeglenkesekvenser(antall, ider, start, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentVeglenkesekvenser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Str첩m veglenker som NDJSON.
         * @param {string} [start] Hent veglenker etterf첩lgende [veglenkesekvensId]-[veglenkenummer]
         * @param {Set<number>} [ider] Hent kun veglenker fra angitte veglenkesekvens-IDer
         * @param {number} [antall] Antall veglenker som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVeglenker(start?: string, ider?: Set<number>, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VeglenkeMedId>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamVeglenker(start, ider, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.streamVeglenker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenser som NDJSON.
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {number} [antall] Antall veglenkesekvenser som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVeglenkesekvenser(start?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Veglenkesekvens>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamVeglenkesekvenser(start, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.streamVeglenkesekvenser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VegnettApi - factory interface
 * @export
 */
export const VegnettApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VegnettApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId ID for noden
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNode(nodeId: number, options?: RawAxiosRequestConfig): AxiosPromise<Node> {
            return localVarFp.hentNode(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun noder med angitte IDer
         * @param {number} [start] Hent noder etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNoder(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig): AxiosPromise<NoderSide> {
            return localVarFp.hentNoder(antall, ider, start, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId ID for veglenkesekvensen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig): AxiosPromise<Veglenkesekvens> {
            return localVarFp.hentVeglenkesekvens(veglenkesekvensId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun veglenkesekvenser med angitte IDer
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvenser(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig): AxiosPromise<VeglenkesekvenserSide> {
            return localVarFp.hentVeglenkesekvenser(antall, ider, start, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Str첩m veglenker som NDJSON.
         * @param {string} [start] Hent veglenker etterf첩lgende [veglenkesekvensId]-[veglenkenummer]
         * @param {Set<number>} [ider] Hent kun veglenker fra angitte veglenkesekvens-IDer
         * @param {number} [antall] Antall veglenker som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenker(start?: string, ider?: Set<number>, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<VeglenkeMedId>> {
            return localVarFp.streamVeglenker(start, ider, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Str첩m veglenkesekvenser som NDJSON.
         * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
         * @param {number} [antall] Antall veglenkesekvenser som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVeglenkesekvenser(start?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Veglenkesekvens>> {
            return localVarFp.streamVeglenkesekvenser(start, antall, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VegnettApi - object-oriented interface
 * @export
 * @class VegnettApi
 * @extends {BaseAPI}
 */
export class VegnettApi extends BaseAPI {
    /**
     * 
     * @summary Hent node
     * @param {number} nodeId ID for noden
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentNode(nodeId: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentNode(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent noder
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] Hent kun noder med angitte IDer
     * @param {number} [start] Hent noder etterf첩lgende denne IDen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentNoder(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentNoder(antall, ider, start, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent veglenkesekvens
     * @param {number} veglenkesekvensId ID for veglenkesekvensen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentVeglenkesekvens(veglenkesekvensId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent veglenkesekvenser
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] Hent kun veglenkesekvenser med angitte IDer
     * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentVeglenkesekvenser(antall?: number, ider?: Set<number>, start?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentVeglenkesekvenser(antall, ider, start, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Str첩m veglenker som NDJSON.
     * @param {string} [start] Hent veglenker etterf첩lgende [veglenkesekvensId]-[veglenkenummer]
     * @param {Set<number>} [ider] Hent kun veglenker fra angitte veglenkesekvens-IDer
     * @param {number} [antall] Antall veglenker som skal hentes. Fra 1 til 10000, standard 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public streamVeglenker(start?: string, ider?: Set<number>, antall?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).streamVeglenker(start, ider, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Str첩m veglenkesekvenser som NDJSON.
     * @param {number} [start] Hent veglenkesekvenser etterf첩lgende denne IDen
     * @param {number} [antall] Antall veglenkesekvenser som skal hentes. Fra 1 til 10000, standard 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public streamVeglenkesekvenser(start?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).streamVeglenkesekvenser(start, antall, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VegobjekterApi - axios parameter creator
 * @export
 */
export const VegobjekterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {number} versjon Versjon av vegobjektet
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekt: async (typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<InkluderIVegobjekt>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjekt', 'typeId', typeId)
            // verify required parameter 'vegobjektId' is not null or undefined
            assertParamExists('hentVegobjekt', 'vegobjektId', vegobjektId)
            // verify required parameter 'versjon' is not null or undefined
            assertParamExists('hentVegobjekt', 'versjon', versjon)
            const localVarPath = `/api/v1/vegobjekter/{typeId}/{vegobjektId}/{versjon}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)))
                .replace(`{${"vegobjektId"}}`, encodeURIComponent(String(vegobjektId)))
                .replace(`{${"versjon"}}`, encodeURIComponent(String(versjon)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (inkluder) {
                localVarQueryParameter['inkluder'] = Array.from(inkluder);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegobjekt p책 dato (ukorrigert)
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {string} dato Dato 책 hente vegobjekt fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHistorisk: async (typeId: number, vegobjektId: number, dato: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjektHistorisk', 'typeId', typeId)
            // verify required parameter 'vegobjektId' is not null or undefined
            assertParamExists('hentVegobjektHistorisk', 'vegobjektId', vegobjektId)
            // verify required parameter 'dato' is not null or undefined
            assertParamExists('hentVegobjektHistorisk', 'dato', dato)
            const localVarPath = `/api/v1/vegobjekter/{typeId}/{vegobjektId}/historisk`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)))
                .replace(`{${"vegobjektId"}}`, encodeURIComponent(String(vegobjektId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (dato !== undefined) {
                localVarQueryParameter['dato'] = (dato as any instanceof Date) ?
                    (dato as any).toISOString().substring(0,10) :
                    dato;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun vegobjekter med angitte IDer
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {string} [start] Hent vegobjekter etterf첩lgende [vegobjektId]-[versjon]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekter: async (typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<InkluderIVegobjekt>, start?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjekter', 'typeId', typeId)
            const localVarPath = `/api/v1/vegobjekter/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (inkluder) {
                localVarQueryParameter['inkluder'] = Array.from(inkluder);
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Str첩m aktive vegobjekter som NDJSON.
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall vegobjekter som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {number} [start] Hent vegobjekter etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekterStream: async (typeId: number, antall?: number, start?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjekterStream', 'typeId', typeId)
            const localVarPath = `/api/v1/vegobjekter/{typeId}/stream`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VegobjekterApi - functional programming interface
 * @export
 */
export const VegobjekterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VegobjekterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {number} versjon Versjon av vegobjektet
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<InkluderIVegobjekt>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vegobjekt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjekt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegobjekt p책 dato (ukorrigert)
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {string} dato Dato 책 hente vegobjekt fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjektHistorisk(typeId: number, vegobjektId: number, dato: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vegobjekt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjektHistorisk(typeId, vegobjektId, dato, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjektHistorisk']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun vegobjekter med angitte IDer
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {string} [start] Hent vegobjekter etterf첩lgende [vegobjektId]-[versjon]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<InkluderIVegobjekt>, start?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegobjekterSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjekter(typeId, antall, ider, inkluder, start, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjekter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Str첩m aktive vegobjekter som NDJSON.
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall vegobjekter som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {number} [start] Hent vegobjekter etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjekterStream(typeId: number, antall?: number, start?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Vegobjekt>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjekterStream(typeId, antall, start, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjekterStream']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VegobjekterApi - factory interface
 * @export
 */
export const VegobjekterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VegobjekterApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {number} versjon Versjon av vegobjektet
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<InkluderIVegobjekt>, options?: RawAxiosRequestConfig): AxiosPromise<Vegobjekt> {
            return localVarFp.hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegobjekt p책 dato (ukorrigert)
         * @param {number} typeId Vegobjekttype ID
         * @param {number} vegobjektId Vegobjekt ID
         * @param {string} dato Dato 책 hente vegobjekt fra
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHistorisk(typeId: number, vegobjektId: number, dato: string, options?: RawAxiosRequestConfig): AxiosPromise<Vegobjekt> {
            return localVarFp.hentVegobjektHistorisk(typeId, vegobjektId, dato, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] Hent kun vegobjekter med angitte IDer
         * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
         * @param {string} [start] Hent vegobjekter etterf첩lgende [vegobjektId]-[versjon]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<InkluderIVegobjekt>, start?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegobjekterSide> {
            return localVarFp.hentVegobjekter(typeId, antall, ider, inkluder, start, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Str첩m aktive vegobjekter som NDJSON.
         * @param {number} typeId Vegobjekttype ID
         * @param {number} [antall] Antall vegobjekter som skal hentes. Fra 1 til 10000, standard 1000.
         * @param {number} [start] Hent vegobjekter etterf첩lgende denne IDen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekterStream(typeId: number, antall?: number, start?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Vegobjekt>> {
            return localVarFp.hentVegobjekterStream(typeId, antall, start, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VegobjekterApi - object-oriented interface
 * @export
 * @class VegobjekterApi
 * @extends {BaseAPI}
 */
export class VegobjekterApi extends BaseAPI {
    /**
     * 
     * @summary Hent vegobjekt
     * @param {number} typeId Vegobjekttype ID
     * @param {number} vegobjektId Vegobjekt ID
     * @param {number} versjon Versjon av vegobjektet
     * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<InkluderIVegobjekt>, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegobjekt p책 dato (ukorrigert)
     * @param {number} typeId Vegobjekttype ID
     * @param {number} vegobjektId Vegobjekt ID
     * @param {string} dato Dato 책 hente vegobjekt fra
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjektHistorisk(typeId: number, vegobjektId: number, dato: string, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjektHistorisk(typeId, vegobjektId, dato, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegobjekter
     * @param {number} typeId Vegobjekttype ID
     * @param {number} [antall] Antall som skal returneres i respons. M책 v챈re et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] Hent kun vegobjekter med angitte IDer
     * @param {Set<InkluderIVegobjekt>} [inkluder] Velg hvilke data som skal inkluderes i responsen
     * @param {string} [start] Hent vegobjekter etterf첩lgende [vegobjektId]-[versjon]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<InkluderIVegobjekt>, start?: string, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjekter(typeId, antall, ider, inkluder, start, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Str첩m aktive vegobjekter som NDJSON.
     * @param {number} typeId Vegobjekttype ID
     * @param {number} [antall] Antall vegobjekter som skal hentes. Fra 1 til 10000, standard 1000.
     * @param {number} [start] Hent vegobjekter etterf첩lgende denne IDen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjekterStream(typeId: number, antall?: number, start?: number, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjekterStream(typeId, antall, start, options).then((request) => request(this.axios, this.basePath));
    }
}



