/* tslint:disable */
/* eslint-disable */
/**
 * NVDB API Les Uberiket
 * Dette API-et brukes til å lese uberikede hendelser, vegobjekter og vegnett. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v1/Uberiket
 *
 * The version of the OpenAPI document: v1
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GeometriKvalitet
 */
export interface GeometriKvalitet {
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'malemetode'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'malemetodeHoyde'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'noyaktighet'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'noyaktighetHoyde'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'synbarhet'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeometriKvalitet
     */
    'maksimaltAvvik'?: number;
    /**
     * 
     * @type {string}
     * @memberof GeometriKvalitet
     */
    'datafangstmetode'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeometriKvalitet
     */
    'datafangstmetodeHoyde'?: string;
}
/**
 * 
 * @export
 * @interface Geometristruktur
 */
export interface Geometristruktur {
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'wkt': string;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'srid': GeometristrukturSridEnum;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'lengde'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'datafangstdato'?: string;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'temakode'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'medium'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'kommune'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometristruktur
     */
    'hoydereferanse'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'sosiNavn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Geometristruktur
     */
    'referansegeometri'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'verifiseringsdato'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'oppdateringsdato'?: string;
    /**
     * 
     * @type {string}
     * @memberof Geometristruktur
     */
    'prosesshistorikk'?: string;
    /**
     * 
     * @type {GeometriKvalitet}
     * @memberof Geometristruktur
     */
    'kvalitet'?: GeometriKvalitet;
}

export const GeometristrukturSridEnum = {
    _5972: '5972',
    _5973: '5973',
    _5974: '5974',
    _5975: '5975',
    _4326: '4326'
} as const;

export type GeometristrukturSridEnum = typeof GeometristrukturSridEnum[keyof typeof GeometristrukturSridEnum];

/**
 * 
 * @export
 * @interface Gyldighetsperiode
 */
export interface Gyldighetsperiode {
    /**
     * 
     * @type {string}
     * @memberof Gyldighetsperiode
     */
    'startdato': string;
    /**
     * 
     * @type {string}
     * @memberof Gyldighetsperiode
     */
    'sluttdato'?: string;
}
/**
 * 
 * @export
 * @interface NesteSide
 */
export interface NesteSide {
    /**
     * 
     * @type {string}
     * @memberof NesteSide
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof NesteSide
     */
    'href': string;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'id': number;
    /**
     * 
     * @type {Set<Nodeport>}
     * @memberof Node
     */
    'porter': Set<Nodeport>;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof Node
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof Node
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface Nodeport
 */
export interface Nodeport {
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'nummer': number;
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'veglenkesekvensId': number;
    /**
     * 
     * @type {number}
     * @memberof Nodeport
     */
    'veglenkesekvensPortNummer': number;
}
/**
 * 
 * @export
 * @interface NoderSide
 */
export interface NoderSide {
    /**
     * 
     * @type {Array<Node>}
     * @memberof NoderSide
     */
    'noder': Array<Node>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof NoderSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetail
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'instance'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProblemDetail
     */
    'properties'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface SideMetadata
 */
export interface SideMetadata {
    /**
     * 
     * @type {number}
     * @memberof SideMetadata
     */
    'returnert': number;
    /**
     * 
     * @type {number}
     * @memberof SideMetadata
     */
    'sidestorrelse': number;
    /**
     * 
     * @type {NesteSide}
     * @memberof SideMetadata
     */
    'neste'?: NesteSide;
}
/**
 * 
 * @export
 * @interface StedfestingLinje
 */
export interface StedfestingLinje {
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'startposisjon': number;
    /**
     * 
     * @type {number}
     * @memberof StedfestingLinje
     */
    'sluttposisjon': number;
    /**
     * 
     * @type {string}
     * @memberof StedfestingLinje
     */
    'retning'?: StedfestingLinjeRetningEnum;
    /**
     * 
     * @type {string}
     * @memberof StedfestingLinje
     */
    'sideposisjon'?: StedfestingLinjeSideposisjonEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof StedfestingLinje
     */
    'kjorefelt': Array<string>;
}

export const StedfestingLinjeRetningEnum = {
    _0: '0',
    _1: '1'
} as const;

export type StedfestingLinjeRetningEnum = typeof StedfestingLinjeRetningEnum[keyof typeof StedfestingLinjeRetningEnum];
export const StedfestingLinjeSideposisjonEnum = {
    V: 'V',
    H: 'H',
    Hv: 'HV',
    Vh: 'VH',
    M: 'M',
    K: 'K',
    Mv: 'MV',
    Mh: 'MH',
    Vt: 'VT',
    Ht: 'HT',
    R0: 'R0',
    R: 'R',
    L: 'L'
} as const;

export type StedfestingLinjeSideposisjonEnum = typeof StedfestingLinjeSideposisjonEnum[keyof typeof StedfestingLinjeSideposisjonEnum];

/**
 * 
 * @export
 * @interface Veglenke
 */
export interface Veglenke {
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'nummer': number;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof Veglenke
     */
    'gyldighetsperiode': Gyldighetsperiode;
    /**
     * 
     * @type {boolean}
     * @memberof Veglenke
     */
    'konnektering': boolean;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'topologiniva': VeglenkeTopologinivaEnum;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'maledato'?: string;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'malemetode': VeglenkeMalemetodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'detaljniva': VeglenkeDetaljnivaEnum;
    /**
     * 
     * @type {string}
     * @memberof Veglenke
     */
    'typeVeg': VeglenkeTypeVegEnum;
    /**
     * 
     * @type {StedfestingLinje}
     * @memberof Veglenke
     */
    'superstedfesting'?: StedfestingLinje;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'startport': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'sluttport': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'kommune': number;
    /**
     * 
     * @type {Geometristruktur}
     * @memberof Veglenke
     */
    'geometri': Geometristruktur;
    /**
     * 
     * @type {number}
     * @memberof Veglenke
     */
    'lengde': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Veglenke
     */
    'feltoversikt': Array<string>;
}

export const VeglenkeTopologinivaEnum = {
    _0: '0',
    _1: '1',
    _2: '2'
} as const;

export type VeglenkeTopologinivaEnum = typeof VeglenkeTopologinivaEnum[keyof typeof VeglenkeTopologinivaEnum];
export const VeglenkeMalemetodeEnum = {
    _0: '0',
    _1: '1'
} as const;

export type VeglenkeMalemetodeEnum = typeof VeglenkeMalemetodeEnum[keyof typeof VeglenkeMalemetodeEnum];
export const VeglenkeDetaljnivaEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3'
} as const;

export type VeglenkeDetaljnivaEnum = typeof VeglenkeDetaljnivaEnum[keyof typeof VeglenkeDetaljnivaEnum];
export const VeglenkeTypeVegEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16'
} as const;

export type VeglenkeTypeVegEnum = typeof VeglenkeTypeVegEnum[keyof typeof VeglenkeTypeVegEnum];

/**
 * 
 * @export
 * @interface Veglenkesekvens
 */
export interface Veglenkesekvens {
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvens
     */
    'id': number;
    /**
     * 
     * @type {Set<Veglenkesekvensport>}
     * @memberof Veglenkesekvens
     */
    'porter': Set<Veglenkesekvensport>;
    /**
     * 
     * @type {Set<Veglenke>}
     * @memberof Veglenkesekvens
     */
    'veglenker': Set<Veglenke>;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvens
     */
    'lengde': number;
    /**
     * 
     * @type {string}
     * @memberof Veglenkesekvens
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface VeglenkesekvenserSide
 */
export interface VeglenkesekvenserSide {
    /**
     * 
     * @type {Array<Veglenkesekvens>}
     * @memberof VeglenkesekvenserSide
     */
    'veglenkesekvenser': Array<Veglenkesekvens>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VeglenkesekvenserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface Veglenkesekvensport
 */
export interface Veglenkesekvensport {
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nummer': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nodeId': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'nodePortNummer': number;
    /**
     * 
     * @type {number}
     * @memberof Veglenkesekvensport
     */
    'posisjon': number;
}
/**
 * 
 * @export
 * @interface VegnettHendelserSide
 */
export interface VegnettHendelserSide {
    /**
     * 
     * @type {Array<VegnettNotifikasjon>}
     * @memberof VegnettHendelserSide
     */
    'hendelser': Array<VegnettNotifikasjon>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegnettHendelserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface VegnettNotifikasjon
 */
export interface VegnettNotifikasjon {
    /**
     * 
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'hendelseId': number;
    /**
     * 
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'nettelementId': number;
    /**
     * 
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'nettelementType': number;
    /**
     * 
     * @type {number}
     * @memberof VegnettNotifikasjon
     */
    'versjon': number;
    /**
     * 
     * @type {string}
     * @memberof VegnettNotifikasjon
     */
    'tidspunkt': string;
    /**
     * 
     * @type {string}
     * @memberof VegnettNotifikasjon
     */
    'hendelseType': string;
}
/**
 * 
 * @export
 * @interface Vegobjekt
 */
export interface Vegobjekt {
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'versjon': number;
    /**
     * 
     * @type {number}
     * @memberof Vegobjekt
     */
    'typeId': number;
    /**
     * 
     * @type {Gyldighetsperiode}
     * @memberof Vegobjekt
     */
    'gyldighetsperiode'?: Gyldighetsperiode;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Vegobjekt
     */
    'egenskaper'?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: Set<VegobjektId>; }}
     * @memberof Vegobjekt
     */
    'barn'?: { [key: string]: Set<VegobjektId>; };
    /**
     * 
     * @type {object}
     * @memberof Vegobjekt
     */
    'stedfesting'?: object;
    /**
     * 
     * @type {string}
     * @memberof Vegobjekt
     */
    'sistEndret': string;
}
/**
 * 
 * @export
 * @interface VegobjektHendelserSide
 */
export interface VegobjektHendelserSide {
    /**
     * 
     * @type {Array<VegobjektNotifikasjon>}
     * @memberof VegobjektHendelserSide
     */
    'hendelser': Array<VegobjektNotifikasjon>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegobjektHendelserSide
     */
    'metadata': SideMetadata;
}
/**
 * 
 * @export
 * @interface VegobjektId
 */
export interface VegobjektId {
    /**
     * 
     * @type {number}
     * @memberof VegobjektId
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface VegobjektNotifikasjon
 */
export interface VegobjektNotifikasjon {
    /**
     * 
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'hendelseId': number;
    /**
     * 
     * @type {string}
     * @memberof VegobjektNotifikasjon
     */
    'hendelseType': string;
    /**
     * 
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektId': number;
    /**
     * 
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof VegobjektNotifikasjon
     */
    'vegobjektVersjon': number;
    /**
     * 
     * @type {string}
     * @memberof VegobjektNotifikasjon
     */
    'tidspunkt': string;
}
/**
 * 
 * @export
 * @interface VegobjekterSide
 */
export interface VegobjekterSide {
    /**
     * 
     * @type {Array<Vegobjekt>}
     * @memberof VegobjekterSide
     */
    'vegobjekter': Array<Vegobjekt>;
    /**
     * 
     * @type {SideMetadata}
     * @memberof VegobjekterSide
     */
    'metadata': SideMetadata;
}

/**
 * HendelserApi - axios parameter creator
 * @export
 */
export const HendelserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent siste vegnett hendelse Id
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegnettHendelseId: async (tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/vegnett/siste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent siste vegobjekt hendelse Id
         * @param {number} typeId 
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegobjektHendelseId: async (typeId: number, tidspunkt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentSisteVegobjektHendelseId', 'typeId', typeId)
            const localVarPath = `/api/v1/hendelser/vegobjekter/{typeId}/siste`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (tidspunkt !== undefined) {
                localVarQueryParameter['tidspunkt'] = (tidspunkt as any instanceof Date) ?
                    (tidspunkt as any).toISOString() :
                    tidspunkt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegnett hendelser
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegnettHendelser: async (fraHendelseId?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/hendelser/vegnett`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (fraHendelseId !== undefined) {
                localVarQueryParameter['fraHendelseId'] = fraHendelseId;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegobjekt hendelser
         * @param {number} typeId 
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHendelser: async (typeId: number, fraHendelseId?: number, antall?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjektHendelser', 'typeId', typeId)
            const localVarPath = `/api/v1/hendelser/vegobjekter/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (fraHendelseId !== undefined) {
                localVarQueryParameter['fraHendelseId'] = fraHendelseId;
            }

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HendelserApi - functional programming interface
 * @export
 */
export const HendelserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HendelserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent siste vegnett hendelse Id
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteVegnettHendelseId(tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteVegnettHendelseId(tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteVegnettHendelseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent siste vegobjekt hendelse Id
         * @param {number} typeId 
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentSisteVegobjektHendelseId(typeId, tidspunkt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentSisteVegobjektHendelseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegnett hendelser
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegnettHendelser(fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegnettHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegnettHendelser(fraHendelseId, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentVegnettHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegobjekt hendelser
         * @param {number} typeId 
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjektHendelser(typeId: number, fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegobjektHendelserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjektHendelser(typeId, fraHendelseId, antall, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HendelserApi.hentVegobjektHendelser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HendelserApi - factory interface
 * @export
 */
export const HendelserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HendelserApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent siste vegnett hendelse Id
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegnettHendelseId(tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.hentSisteVegnettHendelseId(tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent siste vegobjekt hendelse Id
         * @param {number} typeId 
         * @param {string} [tidspunkt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.hentSisteVegobjektHendelseId(typeId, tidspunkt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegnett hendelser
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegnettHendelser(fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegnettHendelserSide> {
            return localVarFp.hentVegnettHendelser(fraHendelseId, antall, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegobjekt hendelser
         * @param {number} typeId 
         * @param {number} [fraHendelseId] 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjektHendelser(typeId: number, fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig): AxiosPromise<VegobjektHendelserSide> {
            return localVarFp.hentVegobjektHendelser(typeId, fraHendelseId, antall, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HendelserApi - object-oriented interface
 * @export
 * @class HendelserApi
 * @extends {BaseAPI}
 */
export class HendelserApi extends BaseAPI {
    /**
     * 
     * @summary Hent siste vegnett hendelse Id
     * @param {string} [tidspunkt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteVegnettHendelseId(tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteVegnettHendelseId(tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent siste vegobjekt hendelse Id
     * @param {number} typeId 
     * @param {string} [tidspunkt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentSisteVegobjektHendelseId(typeId: number, tidspunkt?: string, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentSisteVegobjektHendelseId(typeId, tidspunkt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegnett hendelser
     * @param {number} [fraHendelseId] 
     * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentVegnettHendelser(fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentVegnettHendelser(fraHendelseId, antall, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegobjekt hendelser
     * @param {number} typeId 
     * @param {number} [fraHendelseId] 
     * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HendelserApi
     */
    public hentVegobjektHendelser(typeId: number, fraHendelseId?: number, antall?: number, options?: RawAxiosRequestConfig) {
        return HendelserApiFp(this.configuration).hentVegobjektHendelser(typeId, fraHendelseId, antall, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VegnettApi - axios parameter creator
 * @export
 */
export const VegnettApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNode: async (nodeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('hentNode', 'nodeId', nodeId)
            const localVarPath = `/api/v1/vegnett/noder/{nodeId}`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNoder: async (antall?: number, ider?: Set<number>, startId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/noder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (startId !== undefined) {
                localVarQueryParameter['startId'] = startId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvens: async (veglenkesekvensId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'veglenkesekvensId' is not null or undefined
            assertParamExists('hentVeglenkesekvens', 'veglenkesekvensId', veglenkesekvensId)
            const localVarPath = `/api/v1/vegnett/veglenkesekvenser/{veglenkesekvensId}`
                .replace(`{${"veglenkesekvensId"}}`, encodeURIComponent(String(veglenkesekvensId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvenser: async (antall?: number, ider?: Set<number>, startId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/vegnett/veglenkesekvenser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (startId !== undefined) {
                localVarQueryParameter['startId'] = startId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VegnettApi - functional programming interface
 * @export
 */
export const VegnettApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VegnettApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentNode(nodeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentNode(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentNoder(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoderSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentNoder(antall, ider, startId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentNoder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Veglenkesekvens>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVeglenkesekvens(veglenkesekvensId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentVeglenkesekvens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVeglenkesekvenser(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VeglenkesekvenserSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVeglenkesekvenser(antall, ider, startId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegnettApi.hentVeglenkesekvenser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VegnettApi - factory interface
 * @export
 */
export const VegnettApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VegnettApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNode(nodeId: number, options?: RawAxiosRequestConfig): AxiosPromise<Node> {
            return localVarFp.hentNode(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent noder
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentNoder(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig): AxiosPromise<NoderSide> {
            return localVarFp.hentNoder(antall, ider, startId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent veglenkesekvens
         * @param {number} veglenkesekvensId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig): AxiosPromise<Veglenkesekvens> {
            return localVarFp.hentVeglenkesekvens(veglenkesekvensId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent veglenkesekvenser
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {number} [startId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVeglenkesekvenser(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig): AxiosPromise<VeglenkesekvenserSide> {
            return localVarFp.hentVeglenkesekvenser(antall, ider, startId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VegnettApi - object-oriented interface
 * @export
 * @class VegnettApi
 * @extends {BaseAPI}
 */
export class VegnettApi extends BaseAPI {
    /**
     * 
     * @summary Hent node
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentNode(nodeId: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentNode(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent noder
     * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] 
     * @param {number} [startId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentNoder(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentNoder(antall, ider, startId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent veglenkesekvens
     * @param {number} veglenkesekvensId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentVeglenkesekvens(veglenkesekvensId: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentVeglenkesekvens(veglenkesekvensId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent veglenkesekvenser
     * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] 
     * @param {number} [startId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegnettApi
     */
    public hentVeglenkesekvenser(antall?: number, ider?: Set<number>, startId?: number, options?: RawAxiosRequestConfig) {
        return VegnettApiFp(this.configuration).hentVeglenkesekvenser(antall, ider, startId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VegobjekterApi - axios parameter creator
 * @export
 */
export const VegobjekterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId 
         * @param {number} vegobjektId 
         * @param {number} versjon 
         * @param {Set<HentVegobjektInkluderEnum>} [inkluder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekt: async (typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<HentVegobjektInkluderEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjekt', 'typeId', typeId)
            // verify required parameter 'vegobjektId' is not null or undefined
            assertParamExists('hentVegobjekt', 'vegobjektId', vegobjektId)
            // verify required parameter 'versjon' is not null or undefined
            assertParamExists('hentVegobjekt', 'versjon', versjon)
            const localVarPath = `/api/v1/vegobjekter/{typeId}/{vegobjektId}/{versjon}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)))
                .replace(`{${"vegobjektId"}}`, encodeURIComponent(String(vegobjektId)))
                .replace(`{${"versjon"}}`, encodeURIComponent(String(versjon)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (inkluder) {
                localVarQueryParameter['inkluder'] = Array.from(inkluder);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {Set<HentVegobjekterInkluderEnum>} [inkluder] 
         * @param {string} [start] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekter: async (typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<HentVegobjekterInkluderEnum>, start?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('hentVegobjekter', 'typeId', typeId)
            const localVarPath = `/api/v1/vegobjekter/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (antall !== undefined) {
                localVarQueryParameter['antall'] = antall;
            }

            if (ider) {
                localVarQueryParameter['ider'] = Array.from(ider);
            }

            if (inkluder) {
                localVarQueryParameter['inkluder'] = Array.from(inkluder);
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VegobjekterApi - functional programming interface
 * @export
 */
export const VegobjekterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VegobjekterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId 
         * @param {number} vegobjektId 
         * @param {number} versjon 
         * @param {Set<HentVegobjektInkluderEnum>} [inkluder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<HentVegobjektInkluderEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vegobjekt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjekt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {Set<HentVegobjekterInkluderEnum>} [inkluder] 
         * @param {string} [start] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<HentVegobjekterInkluderEnum>, start?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VegobjekterSide>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hentVegobjekter(typeId, antall, ider, inkluder, start, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VegobjekterApi.hentVegobjekter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VegobjekterApi - factory interface
 * @export
 */
export const VegobjekterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VegobjekterApiFp(configuration)
    return {
        /**
         * 
         * @summary Hent vegobjekt
         * @param {number} typeId 
         * @param {number} vegobjektId 
         * @param {number} versjon 
         * @param {Set<HentVegobjektInkluderEnum>} [inkluder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<HentVegobjektInkluderEnum>, options?: RawAxiosRequestConfig): AxiosPromise<Vegobjekt> {
            return localVarFp.hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hent vegobjekter
         * @param {number} typeId 
         * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
         * @param {Set<number>} [ider] 
         * @param {Set<HentVegobjekterInkluderEnum>} [inkluder] 
         * @param {string} [start] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<HentVegobjekterInkluderEnum>, start?: string, options?: RawAxiosRequestConfig): AxiosPromise<VegobjekterSide> {
            return localVarFp.hentVegobjekter(typeId, antall, ider, inkluder, start, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VegobjekterApi - object-oriented interface
 * @export
 * @class VegobjekterApi
 * @extends {BaseAPI}
 */
export class VegobjekterApi extends BaseAPI {
    /**
     * 
     * @summary Hent vegobjekt
     * @param {number} typeId 
     * @param {number} vegobjektId 
     * @param {number} versjon 
     * @param {Set<HentVegobjektInkluderEnum>} [inkluder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjekt(typeId: number, vegobjektId: number, versjon: number, inkluder?: Set<HentVegobjektInkluderEnum>, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjekt(typeId, vegobjektId, versjon, inkluder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hent vegobjekter
     * @param {number} typeId 
     * @param {number} [antall] Antall som skal returneres i respons. Må være et heltall mellom 1 og 1000
     * @param {Set<number>} [ider] 
     * @param {Set<HentVegobjekterInkluderEnum>} [inkluder] 
     * @param {string} [start] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VegobjekterApi
     */
    public hentVegobjekter(typeId: number, antall?: number, ider?: Set<number>, inkluder?: Set<HentVegobjekterInkluderEnum>, start?: string, options?: RawAxiosRequestConfig) {
        return VegobjekterApiFp(this.configuration).hentVegobjekter(typeId, antall, ider, inkluder, start, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const HentVegobjektInkluderEnum = {
    Gyldighetsperiode: 'gyldighetsperiode',
    Egenskaper: 'egenskaper',
    Stedfesting: 'stedfesting',
    Barn: 'barn',
    Alle: 'alle',
    Minimum: 'minimum'
} as const;
export type HentVegobjektInkluderEnum = typeof HentVegobjektInkluderEnum[keyof typeof HentVegobjektInkluderEnum];
/**
 * @export
 */
export const HentVegobjekterInkluderEnum = {
    Gyldighetsperiode: 'gyldighetsperiode',
    Egenskaper: 'egenskaper',
    Stedfesting: 'stedfesting',
    Barn: 'barn',
    Alle: 'alle',
    Minimum: 'minimum'
} as const;
export type HentVegobjekterInkluderEnum = typeof HentVegobjekterInkluderEnum[keyof typeof HentVegobjekterInkluderEnum];


